package ProgTools;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Scoring_Assistant.java
 *
 * Created on Apr 19, 2011, 4:48:42 PM
 */
import ij.IJ;
import ij.ImageListener;
import ij.ImagePlus;
import ij.ImageStack;
import ij.VirtualStack;
import ij.WindowManager;
import ij.gui.ImageCanvas;
import ij.gui.ImageWindow;
import ij.gui.StackWindow;
import ij.io.FileSaver;
import ij.measure.Calibration;
import ij.measure.ResultsTable;
import ij.plugin.FolderOpener;
import ij.plugin.ImageCalculator;
import ij.plugin.PlugIn;
import ij.process.ImageProcessor;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;
import static org.opencv.videoio.Videoio.CAP_PROP_FRAME_COUNT;
import static org.opencv.videoio.Videoio.CAP_PROP_POS_FRAMES;

/**
 *
 * @author Every one
 */
public class Scoring_Assistant extends java.awt.Frame implements MouseListener, KeyListener, Runnable {

    File DataFile, ImgFile = null;
    ImageStack Stack = null;
    ImagePlus imp = null;
    boolean Error = false;
    private int nFrames = 0;  //Total number of frames in the image seq
    private int nScoringFrames = 30;  //Number of consequitive frames to score
    private File BgdFile;       // Place to store the background image file
    private ImagePlus bgdimp;
    private ImagePlus Signal;
    private ResultsTable rt;
    private ImageCanvas previousCanvas = null;
    private boolean mFlag = false;
    private boolean kFlag = false;
    private boolean reentry = false;
    private int currFramePosition = 0;
    String path = "";

    /**
     * Creates new form Scoring_Assistant
     */
    public Scoring_Assistant() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("Error setting native LAF: " + e);
        }
        initComponents();

        //WindowManager.addWindow(this);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Progress = new javax.swing.JFrame();
        SeqProgress = new javax.swing.JProgressBar();
        OverAllProgressBar = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        NxtSeq = new javax.swing.JButton();
        AutoAdvStat = new javax.swing.JCheckBox();
        DoneScoring = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nImgAdv = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        DataBrowse = new javax.swing.JButton();
        Score = new javax.swing.JButton();
        nPeople = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        Progress.setTitle("Progress..");
        Progress.setBounds(new java.awt.Rectangle(0, 0, 300, 250));

        jLabel6.setText("Over All Progress");

        jLabel7.setText("Progress in sequence..");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Seq. Navigation"));

        NxtSeq.setText("Next Seq");
        NxtSeq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NxtSeqActionPerformed(evt);
            }
        });

        AutoAdvStat.setText("Auto Advance");
        AutoAdvStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoAdvStatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(AutoAdvStat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(NxtSeq, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AutoAdvStat, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NxtSeq, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DoneScoring.setText("Done Scoring");
        DoneScoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneScoringActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProgressLayout = new javax.swing.GroupLayout(Progress.getContentPane());
        Progress.getContentPane().setLayout(ProgressLayout);
        ProgressLayout.setHorizontalGroup(
            ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OverAllProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(SeqProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addGroup(ProgressLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(DoneScoring)))
                .addContainerGap())
        );
        ProgressLayout.setVerticalGroup(
            ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OverAllProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(11, 11, 11)
                .addComponent(SeqProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProgressLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(27, 27, 27))
                    .addGroup(ProgressLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(DoneScoring, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        setBackground(new java.awt.Color(236, 233, 216));
        setTitle("Scoring Assistant");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jLabel3.setText("Number of frames to advance");

        nImgAdv.setText("5");

        jLabel4.setText("Number of people scoring");

        DataBrowse.setText("Select Data file");
        DataBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataBrowseActionPerformed(evt);
            }
        });

        Score.setText("Start_Scoring");
        Score.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScoreActionPerformed(evt);
            }
        });

        nPeople.setModel(new javax.swing.SpinnerNumberModel(1, 0, 2, 1));

        jLabel8.setText("Total number of frames:");

        jLabel9.setText("FPS:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nImgAdv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DataBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Score, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(nImgAdv, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DataBrowse)
                    .addComponent(Score))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm

    private void DataBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataBrowseActionPerformed

        JFileChooser Fc = new JFileChooser("D:\\");
        Fc.setMultiSelectionEnabled(false);
        Fc.setVisible(true);
        int result = Fc.showOpenDialog(null);

        if (result == Fc.APPROVE_OPTION) {
            ImgFile = Fc.getSelectedFile();
            path = ImgFile.getParent();
            System.out.println(path);
            VideoReader vr = new VideoReader(ImgFile);
            imp = vr.getImagePlus();
System.out.println("File read, imp made");
            if (imp == null) {
                Error = true;
            } else {
                Stack = imp.getImageStack();
                nFrames = Stack.getSize();
                imp.show();
System.out.println("Imp show");
            }

        } else
            Error = true;
    }//GEN-LAST:event_DataBrowseActionPerformed

    private void ScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScoreActionPerformed

        Progress.toFront();

        Progress.setVisible(true);
        OverAllProgressBar.setMinimum(0);
        OverAllProgressBar.setMaximum(nFrames);
        OverAllProgressBar.setValue(imp.getCurrentSlice());

        SeqProgress.setMinimum(0);
        SeqProgress.setMaximum(nFrames);

        rt = new ResultsTable();
        rt.show("Score");
        reentry = false;
        //for(int count = 0 ; count < rt.addColumns();

    }//GEN-LAST:event_ScoreActionPerformed

    private void AutoAdvStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoAdvStatActionPerformed
        NxtSeq.setEnabled(!AutoAdvStat.isSelected());
        if (AutoAdvStat.isSelected()) {

            if (imp != null) {
                ImageWindow win = imp.getWindow();
                win.toFront();
                win.removeKeyListener(IJ.getInstance());
                win.removeKeyListener(IJ.getInstance());
                win.addKeyListener(this);
                ImageCanvas canvas = imp.getCanvas();
                canvas.disablePopupMenu(true);
                if (canvas != previousCanvas) {
                    if (previousCanvas != null) {
                        previousCanvas.removeMouseListener(this);
                    }
                    canvas.addMouseListener(this);
                    previousCanvas = canvas;
                }
            } else {
                if (previousCanvas != null) {
                    previousCanvas.removeMouseListener(this);
                }
                previousCanvas = null;
            }
            this.NxtSeqActionPerformed(null);
        }


    }//GEN-LAST:event_AutoAdvStatActionPerformed

    private void NxtSeqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NxtSeqActionPerformed
        // TODO add your handling code here:
        OverAllProgressBar.setValue(imp.getCurrentSlice());
        rt.incrementCounter();

        //rt.show("Score");
        reentry = true;
        (new Thread(this)).start();
    }//GEN-LAST:event_NxtSeqActionPerformed

    private void DoneScoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneScoringActionPerformed
        // TODO add your handling code here:
        ImageWindow win = imp.getWindow();
        win.removeMouseListener(this);
        win.removeKeyListener(this);
        win.addMouseListener(IJ.getInstance());
        win.addKeyListener(IJ.getInstance());
        
                String dir = ImgFile.getParent();
        String name = ImgFile.getName();
        name = name.substring(0, name.lastIndexOf("."));
        String saveName = rt.getTitle() + "_" + name;
        boolean saved = rt.save(dir + File.separator + saveName + ".csv");
        if (saved) {
            ij.IJ.showMessage("Save successful.", "Results table saved.");            
        } else {
            ij.IJ.showMessage("Error", "Error saving results table.");
        }
        
        this.Progress.dispose(); //close progress jframe
        win.close(); //close imp showing vidoe frames
        jLabel9.setText("FPS: ");
        jLabel8.setText("Total number of frames: ");
        initComponents(); //reinitialise class variables
    }//GEN-LAST:event_DoneScoringActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AutoAdvStat;
    private javax.swing.JButton DataBrowse;
    private javax.swing.JButton DoneScoring;
    private javax.swing.JButton NxtSeq;
    private javax.swing.JProgressBar OverAllProgressBar;
    private javax.swing.JFrame Progress;
    private javax.swing.JButton Score;
    private javax.swing.JProgressBar SeqProgress;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nImgAdv;
    private javax.swing.JSpinner nPeople;
    // End of variables declaration//GEN-END:variables

    public void mouseClicked(MouseEvent e) {
        int row = rt.getCounter();
        //IJ.showMessage("Mouse Active");
        currFramePosition = imp.getSlice();
        rt.setValue("Frame", row - 1, currFramePosition);
        if (e.getButton() == MouseEvent.BUTTON1) {
            rt.setValue("Mouse Response", row - 1, 1);
        } else if (e.getButton() == MouseEvent.BUTTON2) {
            rt.setValue("Mouse Response", row - 1, 0);
        }
        rt.show("Score");
        if (AutoAdvStat.isSelected()) {
            mFlag = true;
            this.NxtSeqActionPerformed(null);
        }

    }

    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseReleased(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void keyTyped(KeyEvent e) {
        int row = rt.getCounter();
        if (e.getKeyChar() == 'y' || e.getKeyChar() == 'Y') {
            rt.setValue("Key", row - 1, 1);
        } else {
            rt.setValue("Key", row - 1, 0);
        }
        rt.show("Score");
        if (AutoAdvStat.isSelected()) {
            kFlag = true;
            this.NxtSeqActionPerformed(null);
        }

    }

    public void keyPressed(KeyEvent e) {
        IJ.getInstance().keyPressed(e);
    }

    public void keyReleased(KeyEvent e) {
        // throw new UnsupportedOperationException("Not supported yet.");
        IJ.getInstance().keyReleased(e);
    }

    public void run() {

        Stack = imp.getStack();
        int cSlice = imp.getCurrentSlice();

        // if(cSlice >= nFrames)
        //    return;
        Integer advance = new Integer(nImgAdv.getText());
        if (nFrames < imp.getCurrentSlice() + advance) {
            return;
        }

        SeqProgress.setMaximum(advance);

        Calibration cal = imp.getCalibration();
        long frameRate = 1;
        if (cal.fps != 0.0) {
            frameRate = (long) (1000.0 / cal.fps);
        }
        long timeInc = frameRate;
        ImageWindow win = imp.getWindow();
        StackWindow swin = (StackWindow) win;
        swin.setAnimate(true);
        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);

        long time = System.currentTimeMillis(), nextime = System.currentTimeMillis();
        // long stoptime = timeInc*advance.intValue();
        long timeDiff = nextime - time;

        for (int count = 0; count <= advance; count++) {
            SeqProgress.setValue(count);
            IJ.showStatus((int) (cal.fps + 0.5) + " fps");

            time = System.currentTimeMillis();
            if (time < nextime) {
                // IJ.wait((int)(nextime - time));
                try {
                    timeDiff = nextime - time;
                    Thread.currentThread().sleep(timeDiff);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Scoring_Assistant.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                Thread.currentThread().yield();
                nextime += timeInc;
            }
            swin.showSlice(cSlice + count);

        }
        OverAllProgressBar.setValue(imp.getCurrentSlice());
    }

    private class VideoReader {

        VideoCapture cap;
        int size;
        int wid;
        int hei;
        String path2 = "";

        VideoReader(File file) {
            System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
            cap = new VideoCapture(file.getPath());
            System.out.println("file opened: " + cap.isOpened());
            if (cap.isOpened()) {
                size = (int) cap.get(CAP_PROP_FRAME_COUNT);
                System.out.println("Total no. of frames: " + size);
                try {
                    path2 = path + File.separator + "dir";
                    Files.createDirectories(Paths.get(path2));
                    System.out.println("temp directory created: " + path2);
                } catch (IOException ex) {
                    Logger.getLogger(Scoring_Assistant.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("error making directory");
                    return;
                }
            }
        }

        public BufferedImage Mat2BufferedImage(Mat mat) throws IOException {
            //Encoding the image
            MatOfByte matOfByte = new MatOfByte();
            Imgcodecs.imencode(".jpg", mat, matOfByte);
            //Storing the encoded Mat in a byte array
            byte[] byteArray = matOfByte.toArray();
            //Preparing the Buffered Image
            InputStream in = new ByteArrayInputStream(byteArray);
            BufferedImage bufImage = ImageIO.read(in);
            return bufImage;
        }

        private boolean readCurrFrame() {
            Mat image = new Mat();
//            BufferedImage buff = null;

            // read image to matrix
            boolean success = cap.read(image);
            BufferedImage buff = null;

            if (success) {
                try {
                    buff = Mat2BufferedImage(image);
                } catch (IOException ex) {
                    Logger.getLogger(Video_Tracker_v1.class.getName()).log(Level.SEVERE, null, ex);
                }
                int frameNo = (int) cap.get(CAP_PROP_POS_FRAMES);
                ImagePlus tempImp = new ImagePlus("Frame" + frameNo, buff);
                //save file
                String path3 = path2 + File.separator + "frame" + frameNo + ".tif";
                new FileSaver(tempImp).saveAsTiff(path3);
                return success;
            }
            return success;
        }

        private ImagePlus getImagePlus() {
        for(int i = 0; i< size; i++){
            readCurrFrame();
        }
        FolderOpener fo = new FolderOpener();
        fo.openAsVirtualStack(true);
        ImagePlus imp = fo.openFolder(path2);
//        imp.show();
        return imp;
        }
    }

}
