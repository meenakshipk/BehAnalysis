package ProgTools;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Video_Tracker.java
 *
 */
import ij.ImagePlus;
import ij.gui.Roi;
import ij.measure.ResultsTable;
import ij.plugin.ImageCalculator;
import ij.plugin.filter.ParticleAnalyzer;
import ij.process.AutoThresholder;
import ij.process.ByteProcessor;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author Meenakshi P. Neurodynamics lab, CNS, IISc
 *
 * Notes to self: - figure out how to enter live/file video frame number in the
 * results table generated by particle analyzer - add a pause/resume button -
 * add code so that results table is saved as csv file when modeStop button is
 * clicked Question: How to check whether one point is tracked? Larger to do:
 * Verify tracking results with an example file, e.g., some lab data file.
 */
public class Video_Tracker extends java.awt.Frame implements Runnable {

    private VideoCapture cap;
    private boolean modeStarted = false;
    private final ImagePlus imp = new ImagePlus();
    private ImagePlus impBgd;
    private ImagePlus impTrack;
    private ResultsTable rt;
    private Roi selection;

    /**
     * Creates new form video tracker
     */
    public Video_Tracker() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("Error setting native LAF: " + e);
        }
        initComponents();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
//        System.out.println("Libraries loaded");
        //WindowManager.addWindow(this);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupTrackMode = new javax.swing.ButtonGroup();
        jButtonBgd = new javax.swing.JButton();
        jButtonStartMode = new javax.swing.JButton();
        jButtonStopMode = new javax.swing.JButton();
        jButtonTrack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jRadioButtonLive = new javax.swing.JRadioButton();
        jRadioButtonFile = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldMinSize = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMaxSize = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldMinCirc = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldMaxCirc = new javax.swing.JTextField();

        setBackground(new java.awt.Color(236, 233, 216));
        setBounds(new java.awt.Rectangle(0, 0, 400, 300));
        setTitle("Video tracker");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButtonBgd.setText("Create Bgd");
        jButtonBgd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBgdActionPerformed(evt);
            }
        });

        jButtonStartMode.setText("Start");
        jButtonStartMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartModeActionPerformed(evt);
            }
        });

        jButtonStopMode.setText("Stop");
        jButtonStopMode.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonStopMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopModeActionPerformed(evt);
            }
        });

        jButtonTrack.setText("Track");
        jButtonTrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrackActionPerformed(evt);
            }
        });

        jLabel1.setText("Tracking mode:");

        buttonGroupTrackMode.add(jRadioButtonLive);
        jRadioButtonLive.setSelected(true);
        jRadioButtonLive.setText("Live");

        buttonGroupTrackMode.add(jRadioButtonFile);
        jRadioButtonFile.setText("File");

        jLabel2.setText("Object parameters:");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTextFieldMinSize.setText("50");

        jLabel3.setText("Minimum object size:");

        jTextFieldMaxSize.setText("300");

        jLabel4.setText("Maximum object size:");

        jLabel5.setText("Minimum object circularity:");

        jTextFieldMinCirc.setText("0.5");

        jLabel6.setText("Maximum object circularity::");

        jTextFieldMaxCirc.setText("0.8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(16, 16, 16)
                        .addComponent(jRadioButtonLive)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonFile)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButtonTrack)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonStartMode)
                                        .addGap(6, 6, 6)
                                        .addComponent(jButtonBgd)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldMaxSize, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(jTextFieldMinCirc, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldMaxCirc, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldMinSize))
                                .addGap(17, 17, 17)
                                .addComponent(jButtonStopMode)))
                        .addGap(0, 139, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jRadioButtonLive)
                    .addComponent(jRadioButtonFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStartMode)
                    .addComponent(jButtonStopMode)
                    .addComponent(jButtonBgd))
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldMinSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMaxSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldMinCirc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldMaxCirc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jButtonTrack)
                .addGap(26, 26, 26))
        );

        jButtonBgd.getAccessibleContext().setAccessibleName("");
        jButtonBgd.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        // System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitForm

    private void jButtonBgdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBgdActionPerformed
        // TODO add your handling code here:
        impBgd = (ImagePlus) imp.clone();
        impBgd.setTitle("Background");
        impBgd.show();
    }//GEN-LAST:event_jButtonBgdActionPerformed

    private void jButtonStartModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartModeActionPerformed
        if (jRadioButtonLive.isSelected()) {
            //live tracking mode
            cap = new VideoCapture(0);
        } else if (jRadioButtonFile.isSelected()) {
            //file tracking mode
            JFileChooser fc = new JFileChooser();
            fc.showOpenDialog(this);
            File file = fc.getSelectedFile();
            cap = new VideoCapture(file.getPath());
        }

        if (cap.isOpened()) {
            modeStarted = true;
            videoReader rawData = new videoReader();
            (new Thread(rawData)).start();

        }
    }//GEN-LAST:event_jButtonStartModeActionPerformed

    private void jButtonStopModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopModeActionPerformed
        // TODO add your handling code here:
        modeStarted = false;
//        System.out.println("modeStarted FALSE");
    }//GEN-LAST:event_jButtonStopModeActionPerformed

    private void jButtonTrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrackActionPerformed
        // TODO add your handling code here:
        impBgd.hide();
        selection = impBgd.getRoi();
        if (selection != null) {
            impBgd.getProcessor().fillOutside(selection);
            //    impBgd.show();
        }
        impTrack = new ImagePlus();
        rt = new ResultsTable();
        (new Thread(this)).start();
        rt.show("Results");
    }//GEN-LAST:event_jButtonTrackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupTrackMode;
    private javax.swing.JButton jButtonBgd;
    private javax.swing.JButton jButtonStartMode;
    private javax.swing.JButton jButtonStopMode;
    private javax.swing.JButton jButtonTrack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton jRadioButtonFile;
    private javax.swing.JRadioButton jRadioButtonLive;
    private javax.swing.JTextField jTextFieldMaxCirc;
    private javax.swing.JTextField jTextFieldMaxSize;
    private javax.swing.JTextField jTextFieldMinCirc;
    private javax.swing.JTextField jTextFieldMinSize;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    @Override
    public synchronized void run() {
//        System.out.println("Tracker code goes here");
        ImageCalculator ic = new ImageCalculator();
        int counter = 1;
        do {
            ImagePlus tempImp;
            int unlockattempts = 0;
            while (imp.isLocked()) {
                imp.unlock();
                if (++unlockattempts > 10) {
                    System.out.println("There is problem unlocking the imagestack exiting");
                    return;
                }
            }
            tempImp = ic.run("subtract create", imp, impBgd);
            System.out.println("Thread#1: " + counter);

//            impTrack.setProcessor(tempImp.getProcessor());
            try {
//                this.track(impTrack, counter);
                track(tempImp, counter);
            } catch (InterruptedException ex) {
                Logger.getLogger(Video_Tracker.class.getName()).log(Level.SEVERE, null, ex);
            }
//            impTrack.show();
            counter = counter + 1;
            try {
                wait(100);
                System.out.println("Forced wait");
            } catch (InterruptedException ex) {
                Logger.getLogger(Video_Tracker.class.getName()).log(Level.SEVERE, null, ex);
            }
        } while (modeStarted);
    }

    private void track(ImagePlus imp, int frameNo) throws InterruptedException {

        ByteProcessor byteip = imp.getProcessor().convertToByteProcessor();

        int[] hist = byteip.getHistogram();
        AutoThresholder at = new AutoThresholder();
        int t = at.getThreshold(AutoThresholder.Method.MaxEntropy, hist);
//        System.out.println("Threshold: " + t);

        byteip.setThreshold(t, 255, 3);//255 is max for 8-bit image
//        byteip.createMask();

        impTrack.setProcessor(byteip);
        impTrack.show();;
        ParticleAnalyzer pa = new ParticleAnalyzer(ParticleAnalyzer.SHOW_RESULTS, ParticleAnalyzer.CENTER_OF_MASS, rt, 100, 10000, 0.5, 0.8);
        boolean analyze = pa.analyze(impTrack);
//        Thread.sleep(1000);
    }

    private class videoReader implements Runnable {

        @Override
        public synchronized void run() {
            Mat image = new Mat();
            BufferedImage buff = null;
            boolean success = false;
            int counter = 1;
            do {
                // read image to matrix
                success = cap.read(image);
                try {
                    buff = Mat2BufferedImage(image);
                } catch (IOException ex) {
                    Logger.getLogger(Video_Tracker.class.getName()).log(Level.SEVERE, null, ex);
                }
                ImagePlus tempImp = new ImagePlus("Live feed", buff);

                if (selection != null) {
                    tempImp.getProcessor().fillOutside(selection);
                }
                imp.setProcessor(tempImp.getProcessor());
                imp.show();
                System.out.println("Thread#2: " + counter);

//            System.out.println("Acquired frame");
                counter = counter + 1;
                try {
                    wait(10);
                    System.out.println("Forced wait");
                } catch (InterruptedException ex) {
                    Logger.getLogger(Video_Tracker.class.getName()).log(Level.SEVERE, null, ex);
                }
            } while (modeStarted && success);
            modeStarted = false;
        }

        public BufferedImage Mat2BufferedImage(Mat mat) throws IOException {
            //Encoding the image
            MatOfByte matOfByte = new MatOfByte();
            Imgcodecs.imencode(".jpg", mat, matOfByte);
            //Storing the encoded Mat in a byte array
            byte[] byteArray = matOfByte.toArray();
            //Preparing the Buffered Image
            InputStream in = new ByteArrayInputStream(byteArray);
            BufferedImage bufImage = ImageIO.read(in);
            return bufImage;
        }
    }
}
