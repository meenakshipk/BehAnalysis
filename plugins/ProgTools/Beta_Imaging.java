package ProgTools;

import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.Roi;
import ij.io.FileSaver;
import ij.io.RoiEncoder;
import ij.measure.CurveFitter;
import ij.plugin.RoiEnlarger;
import ij.plugin.filter.ThresholdToSelection;
import ij.process.AutoThresholder;
import ij.process.FloatProcessor;
import ij.process.ImageProcessor;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Meenakshi Date: 2021.11.28
 */
public class Beta_Imaging extends java.awt.Frame implements Runnable {

    private String savedir;
    private double[] xData;
    private int xDatSize;
    private int zSize;
    private ImagePlus imp;
    private ImageProcessor[][] ipArr;
    private File[] fileList;
    private Roi[] roiArr;
    private double[] yData;

    /**
     * Creates new form Scoring_Assistant
     */
    public Beta_Imaging() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("Error setting native LAF: " + e);
        }
        initComponents();

        //WindowManager.addWindow(this);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButtonUploadFiles = new javax.swing.JButton();
        jButtonCalculate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldMaskSize = new javax.swing.JTextField();

        setBackground(new java.awt.Color(236, 233, 216));
        setBounds(new java.awt.Rectangle(0, 0, 400, 300));
        setTitle("Scoring Assistant");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "File name", "Size", "Power"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);

        jButtonUploadFiles.setText("Upload files");
        jButtonUploadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadFilesActionPerformed(evt);
            }
        });

        jButtonCalculate.setText("Calculate");
        jButtonCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculateActionPerformed(evt);
            }
        });

        jLabel1.setText("Enlarge selection mask ROI by (pix):");

        jTextFieldMaskSize.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonUploadFiles)
                            .addComponent(jButtonCalculate)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldMaskSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonUploadFiles)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldMaskSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCalculate)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("Enlarge selection mask ROI by (pix):");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        // System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitForm

    private void jButtonUploadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadFilesActionPerformed
        //        System.out.println("Start");
        String dir = "F:\\00.BetaInVivo\\ROI 2\\day 1";
        //choose multiple files
        JFileChooser Fc = new JFileChooser(dir);
        Fc.setMultiSelectionEnabled(true);
        Fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int status = Fc.showOpenDialog(this);
        fileList = Fc.getSelectedFiles();
        int numFiles = fileList.length;
        savedir = dir + File.separator + "output";

        //store xData
        xData = new double[numFiles];
        //test
        //        System.out.println("start table set");

        //        //populate table
        //        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        //        dtm.setRowCount(numFiles);
        //create table
        for (int f = 0; f < numFiles; f++) {
            File file = fileList[f];
            ImagePlus imp = new ImagePlus(file.getAbsolutePath());
            String name = imp.getTitle();
            name = name.substring(0, name.length() - 4);
            int size = imp.getStackSize();
            int power = Integer.valueOf(name.substring(0, 2));
            xData[f] = power * power;
            jTable.setValueAt(name, f, 0);
            jTable.setValueAt(size, f, 1);
            jTable.setValueAt(power, f, 2);
        }
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        //        System.out.println("Table set");
        xDatSize = fileList.length;
        zSize = (int) jTable.getValueAt(0, 1);
    }//GEN-LAST:event_jButtonUploadFilesActionPerformed

    private void jButtonCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculateActionPerformed

        //process images
        //Pt#1: store/organise data into iparr
        imp = null;
        ImageStack is = null;
        ipArr = new ImageProcessor[zSize][xDatSize];
        System.out.println("Pt#1: dat org");
        for (int intPowPt = 0; intPowPt < xDatSize; intPowPt++) {
            imp = new ImagePlus(fileList[intPowPt].getAbsolutePath());
            is = imp.getStack();
            for (int zPos = 0; zPos < zSize; zPos++) {
                ImageProcessor ip = is.getProcessor(zPos + 1);
                ipArr[zPos][intPowPt] = ip;
            }
        }

        //Pt#2: StackReg
        //create stack for stackreg - stack contains a slice of the 'z'th position from all power intensity files
        imp = null;
        System.out.println("Pt#2: StackReg");
        ImageStack isForROI = new ImageStack();

        for (int zPos = 0; zPos < zSize; zPos++) {
            is = new ImageStack();
            for (int intPowPt = 0; intPowPt < xDatSize; intPowPt++) {
                ImageProcessor ip = ipArr[zPos][intPowPt];
                //2. make stack for registration
                is.addSlice(ip);
            }
            imp = new ImagePlus();
            imp.setStack(is);
            imp.setTitle("zPosSlice_" + zPos);
            StackReg_ sr = new StackReg_();
            sr.run2(imp);
            //save stack after reg
            new FileSaver(imp).saveAsTiff(savedir + File.separator + "02.stackRegedStacks" + File.separator + imp.getTitle() + "_afterReg.tif");
            is = imp.getStack();
            //make img stk for creating selection mask
            isForROI.addSlice(is.getProcessor(is.size()));
        }

        //Pt#3: get selection mask
        roiArr = new Roi[zSize];
        for (int i = 0; i < zSize; i++) {
            ImageProcessor ip = isForROI.getProcessor(i + 1);
            Roi thresholdedROI = getMask(ip);
            roiArr[i] = thresholdedROI;
            //save ROI
            RoiEncoder.save(thresholdedROI, savedir + File.separator + "01.selectionMask" + File.separator + "Roi_slicePos_" + i + ".roi");
            //save stack used for selectionroi creation - TO DO - clear outside using respective ROImask - for representation purpose
            String name = (String) jTable.getValueAt(xDatSize - 1, 0);
            new FileSaver(new ImagePlus(name, isForROI)).saveAsTiff(savedir + File.separator + "02.stackRegedStacks" + File.separator + name + "_inputForROImask.tif");
        }

//        4.Beta fit in a diff thread
        (new Thread(this)).start();
        System.out.println("MainThreadEnd");
    }//GEN-LAST:event_jButtonCalculateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCalculate;
    private javax.swing.JButton jButtonUploadFiles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldMaskSize;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        //4.fitting for beta extraction
        //iterate each pixel            
        System.out.println("Pt#4: beta fitting");
        ImageProcessor ip = null;
        int dimX = imp.getWidth();
        int dimY = imp.getHeight();
        ImageStack betaImageStack = new ImageStack();
        for (int zPos = 0; zPos < zSize; zPos++) {
            Roi thresholdedROI = roiArr[zPos];
            //initialise betaImage float array
            float[][] betaImg = new float[dimX][dimY];

            for (int y = 0; y < dimY; y++) {
                for (int x = 0; x < dimX; x++) {
                    //check if pixel is in thresholded Roi before performing fit
                    if (thresholdedROI.contains(x, y)) {
                        yData = new double[xDatSize];
                        for (int t = 0; t < xDatSize; t++) {
                            ip = ipArr[zPos][t];
                            float val = ip.getPixelValue(x, y);
                            if (val == 0) {
                                yData[t] = Double.NaN;
                            } else {
                                yData[t] = (double) val;
                            }
                        }
                        //fit and store beta param
                        betaImg[x][y] = this.fitBeta(xData, yData);
                    }
                }
            }
            //add slice beta image to stack beta image
            ImageProcessor ipBeta = new FloatProcessor(dimX, dimY);
            ipBeta.setFloatArray(betaImg);
            betaImageStack.addSlice(ipBeta);
            imp = new ImagePlus("Beta image slice_" + zPos, ipBeta);
            //save slice
            new FileSaver(imp).saveAsTiff(savedir + File.separator + "03.BetaSliceImage_" + File.separator + imp.getTitle() + "_afterReg.tif");
            System.out.println(zPos + " beta slice generated");
        }

        //save stack beta image file
        imp = new ImagePlus("Beta image Stack", betaImageStack);
        imp.show();
        new FileSaver(imp).saveAsTiff(savedir + File.separator + "04.BetaImage" + File.separator + imp.getTitle() + ".tif");
        ij.IJ.showMessage("Done", "Beta fit completed.");
    }

    //TO DO - check matlab code for how to initialise parameters
    private float fitBeta(double[] xdata, double[] ydata) {
        //custom fit: Ref - https://doi.org/10.1016/j.bpj.2016.06.044
        //String eq = "y = a + (b * x *(1-(c*x)))"; where a = constant, b = 2/3??Vp, and c = 3/8beta

        String eq = "y = a + (b * x *(1-(c*x)))";
        CurveFitter cf = new CurveFitter(xdata, ydata); //select data and initialize curve fitter

        double[] initialParams = new double[3]; //initialise parameters for user-fn fit 
        initialParams[0] = 1;
        initialParams[1] = 1;
        initialParams[2] = 1;
        cf.doCustomFit(eq, initialParams, false); //custom-fit
        double[] para = cf.getParams(); //get fit parameters
        double beta = 0d;
        if (cf.getStatus() == 0 && cf.getRSquared() > 0.7 && para[2] >= 0) {
            beta = 3 / (8 * para[2]); //beta
        }
//        System.out.println("beta value = " + beta + " r-sq = " + cf.getRSquared());
        return (float) beta;
    }

    private Roi getMask(ImageProcessor ip) {
        //set threshold using autothreshold method triangle
        ip.setAutoThreshold(AutoThresholder.Method.Triangle, true, ImageProcessor.NO_LUT_UPDATE);
        ThresholdToSelection tts = new ThresholdToSelection();
        Roi thresholdedROI = tts.convert(ip);
        //TO DO - edit > selection > enlarge
        double enlargePix = Double.parseDouble(jTextFieldMaskSize.getText());
        thresholdedROI = RoiEnlarger.enlarge(thresholdedROI, enlargePix);
        return thresholdedROI;
    }
}
