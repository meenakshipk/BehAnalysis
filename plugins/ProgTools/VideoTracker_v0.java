package ProgTools;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Scoring_Assistant_0.java
 *
 * Created on Apr 19, 2011, 4:48:42 PM
 */
import ij.IJ;
import ij.ImageListener;
import ij.ImagePlus;
import ij.ImageStack;
import ij.WindowManager;
import ij.gui.ImageCanvas;
import ij.gui.ImageWindow;
import ij.gui.StackWindow;
import ij.measure.Calibration;
import ij.measure.ResultsTable;
import ij.plugin.ImageCalculator;
import ij.plugin.PlugIn;
import ij.process.ImageProcessor;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;
import static org.opencv.videoio.Videoio.CAP_PROP_FPS;
import static org.opencv.videoio.Videoio.CAP_PROP_FRAME_COUNT;
import static org.opencv.videoio.Videoio.CAP_PROP_FRAME_HEIGHT;
import static org.opencv.videoio.Videoio.CAP_PROP_FRAME_WIDTH;
import static org.opencv.videoio.Videoio.CAP_PROP_POS_FRAMES;

/**
 *
 * @author Every one
 */
public class VideoTracker_v0 extends java.awt.Frame implements MouseListener, KeyListener, Runnable {

    File DataFile, ImgFile = null;
    ImageStack Stack = null;
    ImagePlus imp = null;
    boolean Error = false;
    private int nFrames = 0;  //Total number of frames in the image seq
    private int nScoringFrames = 30;  //Number of consequitive frames to score
    private File BgdFile;       // Place to store the background image file
    private ImagePlus bgdimp;
    private ImagePlus Signal;
    private ResultsTable rt;
    private ImageCanvas previousCanvas = null;
    private boolean mFlag = false;
    private boolean kFlag = false;
    private boolean reentry = false;
    private VideoReader vr = null;
//    private long memSize;
//    private double mainChunkSize;
    private int buffFrames;
    static boolean runningStatus = false;
//    private int frameMax = 0;

    /**
     * Creates new form Scoring_Assistant
     */
    public VideoTracker_v0() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("Error setting native LAF: " + e);
        }
        initComponents();

        //WindowManager.addWindow(this);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Progress = new javax.swing.JFrame();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        DataBrowse = new javax.swing.JButton();
        ResultBrowse = new javax.swing.JButton();
        SetBgd = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        SubBgd = new javax.swing.JButton();

        Progress.setTitle("Progress..");
        Progress.setBounds(new java.awt.Rectangle(0, 0, 800, 350));
        Progress.setFocusable(false);

        jLabel6.setText("Live video");

        jButton2.setText("jButton2");

        javax.swing.GroupLayout ProgressLayout = new javax.swing.GroupLayout(Progress.getContentPane());
        Progress.getContentPane().setLayout(ProgressLayout);
        ProgressLayout.setHorizontalGroup(
            ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgressLayout.createSequentialGroup()
                .addGroup(ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProgressLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton2))
                    .addGroup(ProgressLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel6)))
                .addContainerGap(665, Short.MAX_VALUE))
        );
        ProgressLayout.setVerticalGroup(
            ProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgressLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        setBackground(new java.awt.Color(236, 233, 216));
        setTitle("Video tracker");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jLabel2.setText("Motion Threshold");

        jLabel5.setText("Number of consecutive frames");

        DataBrowse.setText("Select Data file");
        DataBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataBrowseActionPerformed(evt);
            }
        });

        ResultBrowse.setText("Export Background Corrected File");
        ResultBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultBrowseActionPerformed(evt);
            }
        });

        SetBgd.setText("Select Background");
        SetBgd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetBgdActionPerformed(evt);
            }
        });

        jButton1.setText("Generate Background");

        SubBgd.setText("Substract BackGround");
        SubBgd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubBgdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ResultBrowse)
                            .addComponent(DataBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SubBgd)
                            .addComponent(SetBgd, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addContainerGap(187, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(DataBrowse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SetBgd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SubBgd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultBrowse)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm

    private void DataBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataBrowseActionPerformed

        JFileChooser Fc = new JFileChooser();
        Fc.setMultiSelectionEnabled(false);
        Fc.setVisible(true);
        int result = Fc.showOpenDialog(null);

        if (result == Fc.APPROVE_OPTION) {
            ImgFile = Fc.getSelectedFile();
            if (ImgFile.exists() && ImgFile.isFile()) {
                // imp = new ImagePlus(ImgFile.getPath());
                //estimate size of memory available in imagej
                //initialise buffer size
                double memSize = IJ.maxMemory() - IJ.currentMemory();
                double mainChunkSize = 0.5 * memSize;
                // open file using opencv
                vr = new VideoReader(ImgFile);
                Error = !vr.initMainStack((int) mainChunkSize);
            } else {
                Error = true;
            }
            if (!Error) {
                imp = new ImagePlus();
                Stack = imp.createEmptyStack();
                addPostChunk(vr.getNextChunk());
                imp.setStack(Stack);
                nFrames = Stack.getSize();
                buffFrames = (int) (0.4 * nFrames);     //effectively buffersize is 0.2 of memsize
                Calibration cal = imp.getCalibration();
                cal.fps = vr.fps;
                System.out.println("imageplus fps: " + imp.getCalibration().fps);
                imp.show();
            }
        } else {
            Error = true;
        }
    }//GEN-LAST:event_DataBrowseActionPerformed

    private void ResultBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultBrowseActionPerformed

        JFileChooser res = new JFileChooser();
        res.setDialogType(res.SAVE_DIALOG);
        res.setVisible(true);
        res.showSaveDialog(res);
        //File

    }//GEN-LAST:event_ResultBrowseActionPerformed

    private void SetBgdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetBgdActionPerformed
        JFileChooser FC = new JFileChooser();
        int result = FC.showOpenDialog(null);

        if (result == FC.APPROVE_OPTION) {
            BgdFile = FC.getSelectedFile();
            if (BgdFile.exists() && BgdFile.isFile()) {
                bgdimp = new ImagePlus(BgdFile.getPath());

            }
            if (bgdimp == null) {
                Error = true;
            } else {

                Stack = bgdimp.getImageStack();
                int bgdSz = Stack.getSize();
                if (nFrames < bgdSz) {
                    ij.IJ.showMessage("Error: Stack mismatch", "The number of frames in background does not match the image stack. Using the first slice and ignoring the rest");
                    while (Stack.getSize() > 1) {
                        Stack.deleteLastSlice();
                    }
                }
                bgdimp.show();
            }
        } else {
            Error = true;
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_SetBgdActionPerformed

    private void SubBgdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubBgdActionPerformed

        int bSlices = bgdimp.getCurrentSlice();
        ImagePlus curSlice;
        ImageStack Stack = imp.getStack();
        ImageStack resStack = new ImageStack(Stack.getWidth(), Stack.getHeight());
        ImageCalculator Calc = new ImageCalculator();
        String imageTitle = imp.getTitle();
        Calibration cal = imp.getCalibration();
        int maxSlice = Stack.getSize();
        boolean status = true;
        if (bSlices == 1) {
            for (int count = 1; count < maxSlice && status; count++) {
                curSlice = new ImagePlus(imageTitle, Stack.getProcessor(count));
                curSlice = Calc.run("Difference create", curSlice, bgdimp);

                resStack.addSlice(imageTitle, curSlice.getProcessor());

            }
            while (imp.getCurrentSlice() > 1) {
                Stack.deleteLastSlice();
            }
            imp.setStack(resStack);
            imp.show();
        } else {
            new ImageCalculator().run("Difference stack", imp, bgdimp);
        }
    }//GEN-LAST:event_SubBgdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DataBrowse;
    private javax.swing.JFrame Progress;
    private javax.swing.JButton ResultBrowse;
    private javax.swing.JButton SetBgd;
    private javax.swing.JButton SubBgd;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables

    public void mouseClicked(MouseEvent e) {
        int row = rt.getCounter();
        //IJ.showMessage("Mouse Active");
        //is there a current instance 
        if(!runningStatus){
            if (e.getButton() == e.BUTTON1) {
                rt.setValue("Mouse", row - 1, 1);
            } else if (e.getButton() == e.BUTTON2) {
                rt.setValue("Mouse", row - 1, 0);
            }
            rt.show("Score");
            if (AutoAdvStat.isSelected()) {
                mFlag = true;
                runningStatus = true;
                this.NxtSeqActionPerformed(null);
            }
        }
    }

    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseReleased(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void keyTyped(KeyEvent e) {
        int row = rt.getCounter();
        if (e.getKeyChar() == 'y' || e.getKeyChar() == 'Y') {
            rt.setValue("Key", row - 1, 1);
        } else {
            rt.setValue("Key", row - 1, 0);
        }
        rt.show("Score");
        if (AutoAdvStat.isSelected()) {
            kFlag = true;
             runningStatus = true;
            if (!runningStatus) this.NxtSeqActionPerformed(null);
        }

    }

    public void keyPressed(KeyEvent e) {
        IJ.getInstance().keyPressed(e);
    }

    public void keyReleased(KeyEvent e) {
        // throw new UnsupportedOperationException("Not supported yet.");
        IJ.getInstance().keyReleased(e);
    }

    public void run() {
        
        Stack = imp.getStack();
        int cSlice = imp.getCurrentSlice();
                        
        int nAdded;
        // if(cSlice >= nFrames)
        //    return;
        Integer advance = new Integer(nImgAdv.getText());
        int maxBound = Stack.getSize() - advance;
         
        if (advance > buffFrames) {

            IJ.showMessage(" Can not advance " + advance + " frames due to limited memory so advancing " + buffFrames);
            advance = buffFrames;
            nImgAdv.setText("" + buffFrames);
        }
       
        if (cSlice >= maxBound - advance && cSlice < maxBound) {
//        System.out.println("entered nFrames < maxBound + advance if block i.e. fetch next chunk");  
            if (vr.isEOF()) {
                    System.out.println("End of File Reached");          //not a good idea to return it will terminate early
                   // return;
                }else
                    new Thread(vr).start(); //will fetch the next chunk
        }
        if (cSlice >= maxBound) {
            System.out.println("entered nFrames > maxBound if block");
            if (!vr.isNextChunkReady()) {
                if (vr.isEOF()) {
                    System.out.println("End of File Reached check at position 1");
                    return;
                }
                System.out.println("SR chunkready = FALSE" + vr.isNextChunkReady());
                try {
                    System.out.println("try sleep block");
                    IJ.showStatus("Waiting for next set of video freames.");
                    Thread.currentThread().wait(1000); //timeout =1s //thread synchronization issue?
                } catch (InterruptedException ex) {
                    Logger.getLogger(VideoTracker_v0.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!vr.isNextChunkReady()) {
                    IJ.showStatus("Error fetching video frames.");
                    ij.IJ.showMessage("Error", "Error fetching video frames. Timed out. ");
                    return;
                }
            }
            System.out.println("SR chunkready = TRUE" + vr.isNextChunkReady());
            int oldcSlice = cSlice;
            int nDelSlices = this.deletePreChunk(); //private method of scoring assistant that deletes the first buffsize number of slices.
            System.out.println("Deleted the prechunck");
            //imp.trimProcessor();
            //imp.updateAndRepaintWindow();
            cSlice -= nDelSlices;
            nAdded =  this.addPostChunk(vr.getNextChunk()); //private method of scoring assistant that adds  buffsize number of or remiang of slices.
            if (vr.isEOF()) {
                    System.out.println("End of File Reached check at position 2");          //not a good idea to return it will terminate early
                   // return;
                }
            new Thread(vr).start(); //will fetch the next chunk
            //cSlice = (cSlice > imp.getStackSize()) ? imp.getStackSize() : cSlice;
            System.out.println("Del Slice = "+ nDelSlices + "of the " + oldcSlice +"New index= "+ cSlice 
                       + " New Stack size = " + imp.getStackSize()+ "No of addedslices = " + nAdded + "Discrepancy="+ ((nAdded - nDelSlices + oldcSlice) - imp.getStackSize()));
           // imp.setSlice(cSlice);
            
//           return;
            // nFrames = Stack.getSize();
        }
        
        SeqProgress.setMaximum(advance);

        Calibration cal = imp.getCalibration();
        long frameRate = 1;
        if (cal.fps != 0.0) {
            frameRate = (long) (1000.0 / cal.fps);
        }
        //System.out.print("The fps before advance is " + cal.fps);
        long timeInc = frameRate;
        ImageWindow win = imp.getWindow();
        StackWindow swin = (StackWindow) win;
        swin.setAnimate(true);
        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);

        long time = System.currentTimeMillis(), nextime = System.currentTimeMillis();
        // long stoptime = timeInc*advance.intValue();
        long timeDiff = nextime - time;
        int StackSize = Stack.getSize();
        advance = cSlice + advance >= StackSize ? StackSize - cSlice : advance;
        SeqProgress.setMaximum(advance);
        for (int count = 0; count < advance; count++) {
            SeqProgress.setValue(count);
            IJ.showStatus((int) (cal.fps + 0.5) + " fps");

            time = System.currentTimeMillis();
            if (time < nextime) {
                // IJ.wait((int)(nextime - time));
                try {
                    timeDiff = nextime - time;
                    Thread.currentThread().sleep(timeDiff);
                } catch (InterruptedException ex) {
                    Logger.getLogger(VideoTracker_v0.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                Thread.currentThread().yield();
                nextime += timeInc;
            }
            swin.showSlice(cSlice + count);
        }
//        OverAllProgressBar.setValue(imp.getCurrentSlice());
        OverAllProgressBar.setValue(OverAllProgressBar.getValue() + advance);
        runningStatus = false;
        return;
    }

    private int deletePreChunk() {
       int maxSlice = Stack.getSize();
       int nSlices2Del = buffFrames > maxSlice  ?  maxSlice : buffFrames ;
       int count;
       for( count = 0 ; count < nSlices2Del ; count ++ )
                  Stack.deleteSlice(count + 1);     //count + 1 shifts the counter to slice number (starts with 1)
       //imp.trimProcessor();
       imp.setStack(Stack);
       return count;
    }

    private int  addPostChunk(ImageProcessor[] nextChunk) {
        int i;
        //imp.trimProcessor();
        for (i = 0; i < nextChunk.length; i++) {
            if (nextChunk[i] == null) {              
                return i;
            }
            Stack.addSlice(nextChunk[i]);
        }
        imp.setStack(Stack);
        return i;
    }

    private class VideoReader extends java.awt.Frame implements Runnable {

        boolean success = false;
        boolean read = true;
        double height = 0.0;
        double width = 0.0;
        double totalFrames = 0.0;
        double posFrame = 0.0;
        double fps = 0.0;
        VideoCapture cap = null;
        private ImageProcessor[] ipArr = null;
        boolean chunkReady = false;
        private boolean eof = false;
        //pixel size and number of pixels

        public VideoReader(File ImgFile) {
            System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
            this.openVideo(ImgFile);
            if (SwingUtilities.isEventDispatchThread()) {
                System.out.print("This is Event Dispatch Thread");
            } else {
                System.out.print("This is not a Event Dispatch Thread");
            }
        }

        @Override
        public void run() {
            //reads next chunk
           if(!isEOF()){
                synchronized (this) {
                    chunkReady = false;
                    System.out.println("VR chunkready1" + chunkReady);
                }
                //           if (success && read) {
                ipArr = new ImageProcessor[buffFrames];
                readFrames(buffFrames);
                synchronized (this) {
                    chunkReady = true;
                    System.out.println("VR chunkready2" + chunkReady);
                }
                //           }
    //              else {
    //                ij.IJ.showMessage("Error", "Error opening/reading video file.");
    //            }

            }else{
               synchronized (this) {
                    chunkReady = false;
                    System.out.println("VR chunkready1" + chunkReady);
                }
           }
        }

        public void openVideo(File ImgFile) {
            cap = new VideoCapture(ImgFile.getAbsolutePath());
            if (cap.isOpened()) {
                System.out.println("Video opened.");
                //read video file using opencv
                height = cap.get(CAP_PROP_FRAME_HEIGHT); //height
                width = cap.get(CAP_PROP_FRAME_WIDTH); //width
                //double format = cap.get(CAP_PROP_FORMAT); //0.0 <- ?
                //double codecPixFormat = cap.get(CAP_PROP_CODEC_PIXEL_FORMAT); //8.08E8 <- ?
                //double buffsize = cap.get(CAP_PROP_BUFFERSIZE); //0
                posFrame = cap.get(CAP_PROP_POS_FRAMES); //0
                fps = cap.get(CAP_PROP_FPS); //25
                totalFrames = cap.get(CAP_PROP_FRAME_COUNT); //3715 <- checks out - got 3700 for 2.28 vid of 25fps         
                System.out.println("Height: " + height + " width: " + width + " FPS: " + fps + "total frame count: " + totalFrames);
                success = true;
            } else {
                success = false;
                //imagej dialog box mentioning error?
            }
        }

        public BufferedImage Mat2BufferedImage(Mat mat) throws IOException {
            //Encoding the image
            MatOfByte matOfByte = new MatOfByte();
            Imgcodecs.imencode(".jpg", mat, matOfByte);
            //Storing the encoded Mat in a byte array
            byte[] byteArray = matOfByte.toArray();
            //Preparing the Buffered Image
            InputStream in = new ByteArrayInputStream(byteArray);
            BufferedImage bufImage = ImageIO.read(in);
            return bufImage;
        }

        private boolean initMainStack(int mainChunkSize) {
            if (posFrame != 0) {
                return false;
            }

            Mat image = new Mat();
            BufferedImage buff = null;
            read = cap.read(image);
            System.out.println("read: " + read);
            System.out.println("posFrame: " + posFrame);

            //calculate required number of frames for init stack
            nFrames = (int) (mainChunkSize / (image.elemSize() * image.width() * image.height()));
            ipArr = new ImageProcessor[nFrames];
            //make ip and store it
            try {
                buff = Mat2BufferedImage(image);
            } catch (IOException ex) {
                Logger.getLogger(VideoTracker_v0.class.getName()).log(Level.SEVERE, null, ex);
            }
            ImagePlus tempImp = new ImagePlus(String.valueOf(posFrame + 1), buff);

            ipArr[0] = tempImp.getProcessor();

            if (success && read) {
                readFrames(nFrames);
            } else {
                ij.IJ.showMessage("Error", "Error opening/reading video file.");
                return false;
            }
            return true;
        }

        private synchronized boolean isNextChunkReady() {
            return chunkReady;
        }

        private ImageProcessor[] getNextChunk() {
            
            return ipArr;
        }

        private void readFrames(int frames) {
            Mat image = null;
            BufferedImage buff = null;
            ImagePlus tempImp = null;
            int idx = 0;
            do {
                image = new Mat();
                read = cap.read(image);
                if (read) {
                    try {
                        buff = Mat2BufferedImage(image);
                    } catch (IOException ex) {
                        Logger.getLogger(VideoTracker_v0.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    tempImp = new ImagePlus(String.valueOf(idx + 1), buff);
                    ipArr[idx] = tempImp.getProcessor();
                    idx = idx + 1;
                    posFrame = cap.get(CAP_PROP_POS_FRAMES);
                }
            } while (idx < frames && read);
            eof = !read;
        }
        

        private boolean isEOF() {
            return eof;
        }
    }

}
